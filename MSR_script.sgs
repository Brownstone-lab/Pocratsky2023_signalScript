' MF_MSR   | *M*easure from threshold script for in vitro monosynaptic reflex & *F*ormatting for export and figure preparation
' Created  | AMP 2021
' Version  | 20220430

'==================================================================================================================================
' I. SCRIPT INFO
' This script quantifies and formats (for figures) the in vitro monosyanptic reflex. 
'
'
' II. ANALYSIS INFO
' This script is written for quantifying the following parameters for in vitro
' monosynaptic reflex using XYdataPlot relative to baseline threshold activity.
'
' You will first format the data and use static and active cursors to define
' the ROI for analysis and measure the baseline activity preceding stimulus.
'
' Thereafter, you will calculate the parameters listed above relative to the
' baseline threshold activity. Data will be shown in XY plots for export.
'
'
' Button functions on Toolbar: 
' 1. Open: 
'    End user will select file to analyse (must be a CED Signal .cfs data file)
'
' 2. Set-up: 
'    2a. Optional: define channel title(s)
'    2b. Select channel to measure
'    2c. Define stimulus onset (unit = seconds)
'    2d. Prompt: prior to proceeding with analysis (standard waveform and/or complex waveform functions)
'                end-user must tag any frames that should be excluded from analysis
' 
' 3. Standard waveform: select this option if the reflex is "textbook" and there is little noise
'    This script primarily uses dynamic cursors to calculate cursor positioning and waveform measurement
'    End user will have two options: Full Analysis or Select Outcome(s) of Interest
'    3a. Option-1: Run Full Analysis - the following outcome parameters will be calculated automatically
'                  (i) latency to onset, (ii) latency to and amplitude of peak, (iii) area (positive response),
'                  (iv) RMS (positive response), (v) minimum, (vi) positive response duration, 
'                  (vii) triphasic response duration 
'    3b. Option-2: Select Outcome(s) of Interest - end user will select the from the above list which parameter(s)
'                  the script will measure
'    3c. After selecting the analysis strategy, end user will be prompted to define threshold crossing strategy to
'        measure signal above baseline 
'        Option-1: Use BL+2SD denotes baseline + 2 standard deviations, preferred for noisy signal
'        Option-2: Use BL(+/-)2SD denotes baseline + 2 standard deviations for rising threshold crossing and 
'                                         baseline - 2 standard deviations for falling threshold crossing
'    3d. After confirming threshold crossing strategy, end user will be prompted to accept or revise cursor 
'        placements for all frames, all sweeps
'    3e. Final output will be XY trendplot, to be exported in raw (.xy) and .txt format for subsequent offline analysis  
'
' 4. Complex waveform: select this option if reflex shows altered, complex waveform and/or noise contamination
'    This script uses a combination of static and dynamic cursors to measure more complex waveforms and/or signal
'    that is contaminated with noise. *Static* cursors will be placed around evoked response - irrespective of "on-off" - 
'    to calculate the latency to peak (from stim onset) and amplitude of peak (within ROI).
'    End user will be prompted with three options for "Select outcome measure(s)":
'    4a. Option-1: True peak evoked response
'        This option will return the following measurements for the *largest* spike observed in a multipeaked response:
'        (i) latency to onset, (ii) latency to and amplitude of peak, (iii) duration (positive response), 
'        (iv) area (positive response)
'    4b. Option-2: First evoked response (multipeaked)
'        This option will return the following measurements for the *first* spike observed in a multipeaked response:
'        (i) latency to and amplitude of first response
'        Nb: this script is error prone, cursor placement requires careful oversight by end-user!
'    4c. Option-3: Total evoked activity
'        This option will return the following measurements for *broadened* reflexes that show prolonged onset-offset duration:
'        (i) duration and (ii) area
'    After selecting analysis strategy, end user will be prompted to repeat steps described above (3c-3e)
'
' 5. Format: prepare sweeps for figure export
'    5a. End user must define the top (y-max), bottom (y-min), left (x-min), and right (x-max) in seconds
'    5b. Output will be two plots: left plot = overdrawn frames (gray), right plot (red) = averaged waveform
'    5c. As of 2022-04-30, the average waveform function is broken. X-max value input value is not being recognised.
'   
' 6. Clean-up: restores dataview, removing formatting applied for figure export
'
' 7. Quit: closes script toolbar
'
' Summary of measurement details:
' 1. Latency to onset : time to first rising threshold crossing
' 2. Latency to peak : time to and amplitude of peak evoked response* (see revision below)
' 3. Peak response : amplitude of peak positive evoked response
' 4. Area (under the curve for positive response component of triphasic wave)
' 5. RMS (under the curve for positive response component of triphasic wave)
' 6. Response duration (for positive component of triphasic wave)
' 7. Peak-to-peak response (for full triphasic wave)
' 8. Minimum response : time to and amplitude of max negative evoked response
' 9. Triphasic duration : total response duration from onset to return threshold crossing
'   
'
' III. FORMATTING INFO
' The data will be formatted as follows:
' 1. User-defined scaling for x- and y-axes
' 2. Overlay all sweeps collected (traces = gray)
' 3. Average waveform will be calculated and scaled identical to raw data (trace = red)
' 4. Data views will be scaled equally for post hoc overlay in figure editing software
'
'===================================================================================================================================

'Func Open%
var data%;                                              ' view handle of data file
var ch%;                                                ' response channel to analyse

'Func Set-up%
var ok%,chkY%;
var ok0%,ch1$,ch2$,ch3$,ch4$;

'Func Stim%
var stim1;                                              ' (REAL) user-defined onset times of stim-1 and stim-2
var ok1%;

'Func Measure1%, Measure1Rev%
var v1%, v2%, v3%, v4%;                                 ' verticle cursor variables
var v5%, v6%, v7%, v8%, v9%;                            ' verticle cursor variables continued
var h1%, h2%, h3%, h4%;                                 ' horizontal cursor variables

var ok6%;                                               ' variables for user-defined threshold crossing calculations in both functions
var label9%,labelor%,label10%,label11%;
var chkBL1%,chkBL2%;

'Func Response1%
var ok2%,ok3%;
var label0%,label1%;
var chkResp1FA%,chkResp1UDA%;
var chkLat2On1%,chkLat2Pk1%,chkArea1%,chkRMS1%;
var chkPk2Pk1%,chkMin1%,chkPosDur1%,chkTriDur1%;

'Func Complex1%();
var ok4%;
var label2%,label3%,label4%,label5%,label6%,label7%,label8%;
var chkLat2OnRev%,chkLat2PkRev%,chkPosDurRev%,chkAreaRev%;
var chkLat2FstPkRev%;
var chkDurTotRev%,chkAreaTotRev%; 

'Func Trendplot1%
var latencyOnsetPlot1%;                                 ' latency to onset XY plot
var latencyPeakPlot1%;                                  ' latency to and amplitude of peak XY plot
var areaPlot1%;                                         ' area under the positive curve XY plot
var rmsAmpPlot1%;                                       ' RMS amplitunde of area under the positive curve XY plot
var posDurationPlot1%;                                  ' duration of positive response XY plot
var peakToPeakPlot1%;                                   ' max-to-min peak-to-peak amplitude XY plot
var minPlot1%;                                          ' latency to and amplitude of minimum XY plot
var triphasicDurPlot1%;                                 ' duration of triphasic response XY plot

var latencyFirstPeakPlot1%;                             ' latency to and amplitude of first peak XY plot

'Func Format1%
var ok5%; 
var ymin1,ymax1,xmin1,xmax1,ymin2,ymax2;                
var ymax2New,ymin2New;
var avgWvfrm1%;

'====================================================================
'First, open data file and select channel to analyse
'====================================================================

DoToolBar%();                                           ' do toolbar function

Func DoToolBar%();

ToolbarClear();                                         ' clear existing toolbars

ToolbarSet(0, "Idle", Idle%);                           ' link to Idle function
ToolbarSet(1, "Quit", Quit%);                           ' button 1 - link to Quit% function
ToolbarSet(7, "Open", Open%);                           ' button 5 - link to Open% function
ToolbarSet(6, "Set-up", Setup%);                        ' button 5 - link to Setup% function
ToolbarSet(5, "Standard waveform", Response1%);         ' button 4 - link to Response1% function
ToolbarSet(4, "Complex waveform", Complex1%);           ' button 4 - link to Complex1% function
ToolbarSet(3, "Format", Format1%);                      ' button 3 - link to Format1% function
ToolbarSet(2, "Clean-up", Cleanup2%);                   ' button 2 - link to Cleanup1% function

Return Toolbar("M_MSR Script", 1023);                   ' create toolbar, 1023 = allow all usability
end;

Func Idle%();                           
Return 1;                                               ' leaves toolbar active
End;

Func Quit%();
Return 0;                                               ' halts toolbar
End;

Func Open%();
'var data%;

data%:=FileOpen("", 0);                                 ' opens the file open dialog
View(data%);                                            ' only look at data%
FrontView(data%);                                       ' bring data to front
Window(0, 0, 57, 96);                                   ' adjust data window size
ChanShow(-1, 1);                                        ' show all channels
Optimise(-1);
XRange(MinTime(),MaxTime());                            ' show full sweep
Overdraw(2, 0);                                         ' remove frame overdrawing

CursorDelete(-1);                                       ' clear all existing vertical cursors
HCursorDelete (-1);                                     ' clear all existing horizontal cursors

Return 1;                                               ' leaves toolbar active
End;

Func Setup%();
'var ok%,chkY%;
'var ok0%,ch1$,ch2$,ch3$,ch4$;

DlgCreate("Define channel title(s)?");
DlgAllow(32);
DlgCheck(1,"Yes");
ok%:=DlgShow(chkY%);
if ok% = 0 then halt; endif

if chkY% <> 0 then                                      ' NEED TO FIX: ONLY LABEL CHANNELS THAT CONTAIN WAVEFORM DATA!
    DlgCreate("Define channel(s)");                     ' define channels
    DlgString(1,"Channel 1",20,"");
    DlgString(2,"Channel 2",20,"");
    DlgString(3,"Channel 3",20,"");
    DlgString(4,"Channel 4",20,"");
    ok0% := DlgShow(ch1$,ch2$,ch3$,ch4$);               ' ok% is 0 if user cancels
    if ok0% = 0 then halt; endif;

    ChanTitle$(1,ch1$);
    ChanTitle$(2,ch2$);
    ChanTitle$(3,ch3$);
    'ChanTitle$(4,ch4$);
    
endif;

Stim%();                                                ' Do stimulus identification

Return 1;                                               ' leaves toolbar active
End;

Func Stim%();
'var ok1%,ch%;
'var stim1;
var tag%;

DlgCreate("Select channel for measurements");
DlgAllow(32);                                           ' user can change view
DlgChan(1,"Channel to analyse",1);
DlgReal(2,"Stimulus onset (s)",0,30);
DlgLabel(3,"Nb: tag frames to exclude from analysis, where applicable");
ok1%:= DlgShow(ch%,stim1,tag%);
if ok1% = 0 then halt; endif;

ChanShow(-1,0);                                         ' hide all channels and...
ChanShow(ch%,1);                                        ' only show channel of interest to analyse
XRange(stim1-0.0175,stim1+0.0225);                      ' user defined x-axis range around ROI
Optimise(-1);

Return 1;                                               ' leaves toolbar active
End;

'=========================================================================================
'                                 EVOKED RESPONSE-1
'=========================================================================================

Func Response1%();
'var ok2%,label0%,chkResp1FA%,chkResp1UDA%;

ChanShow(-1,0);                                         ' hide all channels and...
ChanShow(ch%,1);                                        ' only show channel of interest to analyse
XRange(stim1-0.0175,stim1+0.0225);                      ' user defined x-axis range around ROI
Optimise(-1);

DlgCreate("Evoked response-1 analysis");
DlgAllow(32);                                           ' user can change view
DlgLabel(1,"Select one option:");
DlgCheck(2,"Run full analysis");                        ' full analysis
DlgCheck(3,"Select outcome(s) of interest");            ' user-defined analyses

ok2%:= DlgShow(label0%,chkResp1FA%,chkResp1UDA%);       ' checkbox to confirm analysis of evoked response-1
if ok2% = 0 then halt; endif;

if chkResp1FA% <> 0 then                                  ' if user selects full analysis
    'prompt to select threshold crossing calculation: BL(+)*2SD or BL(+/-)*2SD     
    Measure1%();
    TrendPlot1%();
    Cleanup1%();  
endif;

if chkResp1UDA% <> 0 then                                 ' if user selects user-defined analysis
    'var ok3%,label1%;
    'var chkLat2On1%,chkLat2Pk1%,chkArea1%,chkRMS1%;
    'var chkPk2Pk1%,chkMin1%,chkPosDur1%,chkTriDur1%;
      
    DlgCreate("Evoked response-1 analysis");                       ' prompt user to select outcomes of interest
    DlgLabel(1,"Standard outcome measures:");                      ' label1%
    DlgCheck(2,"Latency to onset");                                ' chkLat2On1%
    DlgCheck(3,"Latency to and amplitude of peak");                ' chkLat2Pk1%
    DlgCheck(4,"Area (positive response)");                        ' chkArea1%
    DlgCheck(5,"RMS (positive response)");                         ' chkRMS1%
    DlgCheck(6,"Peak-to-peak");                                    ' chkPk2Pk1%
    DlgCheck(7,"Minimum");                                         ' chkMin1%
    DlgCheck(8,"Positive response duration");                      ' chkPosDur1%
    DlgCheck(9,"Triphasic response duration");                     ' chkTriDur1%
    
    ok3%:= DlgShow(label1%,chkLat2On1%,chkLat2Pk1%,chkArea1%,chkRMS1%,chkPk2Pk1%,chkMin1%,chkPosDur1%,chkTriDur1%);
    
    if ok3% = 0 then Halt; endif;
    
    if chkLat2On1% <> 0 then
        Measure1%();
        Lat2OnTrendPlot1%(); 
    endif;
    
    if chkLat2Pk1% <> 0 then
        Measure1%();
        Lat2PkTrendPlot1%();    
    endif;
    
    if chkArea1% <> 0 then
        Measure1%();
        AreaTrendPlot1%();  
    endif;
    
    if chkRMS1% <> 0 then
        Measure1%();
        RMSTrendPlot1%();    
    endif;
    
    if chkPk2Pk1% <> 0 then
        Measure1%();
        Pk2PkTrendPlot1%();
    endif;
    
    if chkMin1% <> 0 then
        Measure1%();
        MinTrendPlot1%();
    endif;
    
    if chkPosDur1% <> 0 then
        Measure1%();
        PosDurTrendPlot1%();
    endif;
 
    if chkTriDur1% <> 0 then
        Measure1%();
        TriDurTrendPlot1%();     
    endif;   
        
endif;

Return 1;                                               ' leaves toolbar active
End;

Func Complex1%();
'var ok4%;
'var label2%,label3%,label4%,label5%,label6%,label7%,label8%;
'var chkLat2OnRev%,chkLat2PkRev%,chkPosDurRev%,chkAreaRev%;
'var chkLat2FstPkRev%;
'var chkDurTotRev%,chkAreaTotRev%; 

ChanShow(-1,0);                                         ' hide all channels and...
ChanShow(ch%,1);                                        ' only show channel of interest to analyse
XRange(stim1-0.0175,stim1+0.0225);                      ' user defined x-axis range around ROI
Optimise(-1);
      
DlgCreate("Complex waveform analysis");                         ' prompt user to select outcomes of interest
DlgLabel(1,"Select outcome measure(s)");                        ' label2%
DlgLabel(2,"True peak evoked response:");                       ' label4% 
DlgCheck(3,"Latency to onset");                                 ' chkLat2OnRev%
DlgCheck(4,"Latency to and amplitude of peak");                 ' chkLat2PkRev% 
DlgCheck(5,"Duration (positive response)");                     ' chkPosDurRev%
DlgCheck(6,"Area (positive response)");                         ' chkAreaRev% 
DlgLabel(7,"");                                                 ' label5%
DlgLabel(8,"First evoked reponse (multipeaked)");               ' label6% 
DlgCheck(9,"Latency to and amplitude of first response");       ' chkLat2FstPkRev%
DlgLabel(10,"");                                                ' label7%
    
DlgLabel(11,"Total evoked activity:");                          ' label8%
DlgCheck(12,"Duration");                                        ' chkDurTotRev%
DlgCheck(13,"Area");                                            ' chkAreaTotRev%
       
ok4%:= DlgShow(label2%,label4%,chkLat2OnRev%,chkLat2PkRev%,chkPosDurRev%,chkAreaRev%,label5%,label6%,chkLat2FstPkRev%,label7%,label8%,chkDurTotRev%,chkAreaTotRev%);

if ok4% = 0 then Halt; endif;
    
    if chkLat2OnRev% <> 0 then
        Measure1Rev%();             
        Lat2On1RevTrendPlot1%();                                    
    endif;  
    
    if chkLat2PkRev% <> 0 then
        Measure1Rev%();             
        Lat2Pk1RevTrendPlot1%();
    endif;  
    
    if chkPosDurRev% <> 0 then
        Measure1Rev%();
        PosDurRevTrendPlot1%();
    endif;
    
    if chkAreaRev% <> 0 then
        Measure1Rev%();         
        AreaRevTrendPlot1%();                                       
    endif;  
    
    if chkLat2FstPkRev% <> 0 then
        Measure1RevPeaks%();            
        Lat2Pk1RevPeaksTrendPlot1%();   
    endif;    
    
    if chkDurTotRev% <> 0 then
        Measure1Rev%();
        DurTotRevTrendPlot1%();
    endif;
    
    if chkAreaTotRev% <> 0 then
        Measure1Rev%();
        AreaTotRevTrendPlot1%();
    endif;         
    
Return 1;                                               ' leaves toolbar active
End;

Func Measure1%(); 
'var ok6%;
'var label9%,labelor%,label10%,label11%;
'var chkBL1%,chkBL2%;

'create dialog to select whether user wants to use BL(+)*2SD or BL(+/-)*2SD
DlgCreate("Threshold crossing calculations",0,0,30,0);
DlgAllow(32);                                           ' user can change view
DlgLabel(1,"Select one option:");
DlgCheck(2,"Use BL+2SD");                               ' original cursor placements/calculations
DlgLabel(3,"              or");
DlgCheck(4,"Use BL(+/-)2SD");                          ' revised cursor placements/calculations
DlgLabel(5,"BL+2SD = rising threshold",0,0);
DlgLabel(6,"BL-2SD  = falling threshold",0,0);

ok6%:= DlgShow(label9%,chkBL1%,labelor%,chkBL2%,label10%,label11%);    
if ok6% = 0 then halt; endif;


if chkBL1% <> 0 then                                        ' if using BL+2SD for threshold crossings...
    
    Window(0, 0, 90, 93);
    
    '1. (STATIC) User-defined time frame before stimulus onset to measure baseline activity for threshold crossing
    v1%:=CursorNew(stim1-0.015);                            ' vCursor1
    CursorLabel(4, v1%, "1-baseOn");                        ' label vCursor1 as baseOn
    CursorLabelPos(v1%, 0);                                 ' position vCursor1 at top of screen
    
    v2%:=CursorNew(stim1-0.005);                            ' vCursor2
    CursorLabel(4, v2%, "2-baseOff");                       ' label vCursor2 as baseOff
    CursorLabelPos(v2%, 0);                                 ' position vCursor2 at top of screen
    
    
    '2. (STATIC) User-defined time frame to set region of interest for monosynaptic response measurements
    v3%:=CursorNew(stim1+0.002);                            ' vCursor3
    CursorLabel(4, v3%, "3-START");                         ' label vCursor3 as START
    CursorLabelPos(v3%, 0);                                 ' position vCursor3 at top of screen
    
    v4%:=CursorNew(stim1+0.055);                            ' vCursor4
    CursorLabel(4, v4%, "4-END");                           ' label vCursor4 as END
    CursorLabelPos(v4%, 0);                                 ' position vCursor4 at top of screen
    
    
    '3. (ACTIVE) Position hCursors at baseline threshold activity and at peak response
    h1%:=HCursorNew(ch%);                                    ' create hCursor1, rising threshold above BL*(+)2SD 
    HCursorActive(h1%, 7, Cursor(v1%), Cursor(v2%), 2, 0);   ' mean + 2SD baseline level of activity before stim
    HCursorLabel(4, h1%, "1-BL+2SD");                        ' label hCursor1 "1-BL+2SD"

    h2%:=HCursorNew(ch%);                                    ' create hCursor2  
    'HCursorActive(h2%, 6, Cursor(v3%), Cursor(v4%), 0, 0);  ' Extreme level - peak of evoked response
    HCursorActive(h2%, 4, Cursor(v3%), Cursor(v4%), 0, 0);   ' Maximum - peak of evoked response 
    HCursorLabel(4, h2%, "2-peak");                          ' label hCursor2 "peak"

    
    '4. (ACTIVE) Position vCursors at rising and falling threshold of the positive response in triphasic wave
    v5%:=CursorNew();                                       ' vCursor5
    CursorActive(v5%, 7, ch%, Cursor(v3%), Cursor(v4%), HCursor(h1%), HCursor(h1%), 0.001); ' rising threshold above BL+2SD
    CursorLabel(4, v5%, "5-on");                            ' label vCursor5 "on"
    CursorLabelPos(v5%, 100);                               ' position vCursor5 at bottom of screen           

    v6%:=CursorNew();                                       ' vCursor6
    CursorActive(v6%, 8, ch%, Cursor(v3%), Cursor(v4%), HCursor(h1%), HCursor(h1%), 0.0001); ' falling threshold below BL+2SD
    CursorLabel(4, v6%, "6-off");                           ' label vCursor6 "off"
    CursorLabelPos(v6%, 100);                               ' position vCursor6 at bottom of screen   
        
        
    '5. (ACTIVE) Position vCursors at lowest negative value of triphasic wave and end-of-response threshold crossing (end of the peak-to-peak response)
    v7%:=CursorNew();                                       ' vCursor7
    CursorLabel(4, v7%, "7-min");                           ' label vCursor7 "min"
    CursorLabelPos(v7%, 100);                               ' position vCursor7 at bottom of screen

    v8%:=CursorNew();                                       ' vCursor8
    CursorLabel(4, v8%, "8-return");                        ' label vCursor8 "return"
    CursorLabelPos(v8%, 100);                               ' position vCursor8 at bottom of screen

    CursorActive(v7%, 2, ch%, Cursor(v6%), Cursor(v4%));    ' minimum - most negative value of triphasic wave
    CursorActive(v8%, 7, ch%, Cursor(v7%), Cursor(v4%), HCursor(h1%), HCursor(h1%), 0.0001);' rising threshold - BL+2SD crossing at end of triphasic response

       
    '6. ACTIVE. Position vCursor at "extreme" positive value of the triphasic wave. This is the peak response.
    v9%:=CursorNew();                                         ' vCursor9
    CursorActive(v9%, 3, ch%, Cursor(v5%), Cursor(v6%), HCursor(h1%)); ' Extreme - the peak of the response above BL+2SD
    CursorLabel(4, v9%, "9-peak");                            ' label vCursor9 "peak"
    CursorLabelPos(v9%, 0);                                   ' position vCursor9 at top of screen
        
        
    '7. STATIC. Fetch vCursor(0) and set to t=1.005s. This ensures the data view does not change during analysis
    CursorVisible(0, 1);                                    ' show cursor 0
    Cursor(0, stim1+0.005);                                 ' USER-DEFINED. Set to 1.005s
    CursorLabelPos(0, 90);                                  ' position vCursor0 near bottom of screen
    CursorLabel(0, 0);
    
endif;

if chkBL2% <> 0 then                                        ' if using BL(+/-)2SD threshold crossings
    
    Window(0, 0, 90, 93);

    '1. (STATIC) User-defined time frame before stimulus onset to measure baseline activity for threshold crossing
    v1%:=CursorNew(stim1-0.015);                            ' vCursor1
    CursorLabel(4, v1%, "1-baseOn");                        ' label vCursor1 as baseOn
    CursorLabelPos(v1%, 0);                                 ' position vCursor1 at top of screen
        
    v2%:=CursorNew(stim1-0.005);                            ' vCursor2
    CursorLabel(4, v2%, "2-baseOff");                       ' label vCursor2 as baseOff
    CursorLabelPos(v2%, 0);                                 ' position vCursor2 at top of screen
        
        
    '2. (STATIC) User-defined time frame to set region of interest for monosynaptic response measurements
    v3%:=CursorNew(stim1+0.002);                            ' vCursor3
    CursorLabel(4, v3%, "3-START");                         ' label vCursor3 as START
    CursorLabelPos(v3%, 0);                                 ' position vCursor3 at top of screen
        
    v4%:=CursorNew(stim1+0.055);                             ' vCursor4
    CursorLabel(4, v4%, "4-END");                           ' label vCursor4 as END
    CursorLabelPos(v4%, 0);                                 ' position vCursor4 at top of screen
    
    
    '3. (ACTIVE) Position hCursors at baseline threshold activity and at peak response
    h1%:=HCursorNew(ch%);                                    ' create hCursor1, rising threshold above BL+2SD 
    HCursorActive(h1%, 7, Cursor(v1%), Cursor(v2%), 2, 0);   ' mean + 2SD baseline level of activity before stim
    HCursorLabel(4, h1%, "1-BL+2SD");                        ' label hCursor1 "1-BL+2SD"

    h2%:=HCursorNew(ch%);                                    ' create hCursor2  
    'HCursorActive(h2%, 6, Cursor(v3%), Cursor(v4%), 0, 0);  ' Extreme level - peak of evoked response
    HCursorActive(h2%, 4, Cursor(v3%), Cursor(v4%), 0, 0);   ' Maximum - peak of evoked response 
    HCursorLabel(4, h2%, "2-peak");                          ' label hCursor2 "peak"

    h3%:=HCursorNew(ch%);                                    ' create hCursor3, falling threshold below BL-2SD 
    HCursorActive(h3%, 2, "-HCursor(1)", "XHigh()", 0, 0);   ' Expression (calculate inverse of h1%)
    HCursorLabel(4, h3%, "3-BL-2SD");                        ' label hCursor3 "3-BL-2SD"

    h4%:=HCursorNew(ch%);                                    ' create hCursor4, baseline avg 
    HCursorActive(h4%, 3, "Cursor(1)", "Cursor(2)", 0, 0);   ' mean level
    HCursorLabel(4, h4%, "4-BL");                            ' label hCursor4 "4-BL"

    
    '4. (ACTIVE) Position vCursors at rising and falling threshold of the positive response in triphasic wave
    v5%:=CursorNew();                                       ' vCursor5
    CursorActive(v5%, 7, ch%, Cursor(v3%), Cursor(v4%), HCursor(h1%), HCursor(h1%), 0.001); ' rising threshold above BL+2SD
    CursorLabel(4, v5%, "5-on");                            ' label vCursor5 "on"
    CursorLabelPos(v5%, 100);                               ' position vCursor5 at bottom of screen           
    
    'UPDATE TO BL-(2*SD)
    v6%:=CursorNew();                                       ' vCursor6
    CursorActive(v6%, 8, ch%, Cursor(v3%), Cursor(v4%), HCursor(h3%), HCursor(h3%), 0.0001); ' falling threshold below BL-2SD
    CursorLabel(4, v6%, "6-off");                           ' label vCursor6 "off"
    CursorLabelPos(v6%, 100);                               ' position vCursor6 at bottom of screen   
    
    
    '5. (ACTIVE) Position vCursors at lowest negative value of triphasic wave and end-of-response threshold crossing (end of the peak-to-peak response)
    v7%:=CursorNew();                                       ' vCursor7
    CursorLabel(4, v7%, "7-min");                           ' label vCursor7 "min"
    CursorLabelPos(v7%, 100);                               ' position vCursor7 at bottom of screen

    v8%:=CursorNew();                                       ' vCursor8
    CursorLabel(4, v8%, "8-return");                        ' label vCursor8 "return"
    CursorLabelPos(v8%, 100);                               ' position vCursor8 at bottom of screen

    CursorActive(v7%, 2, ch%, Cursor(v6%), Cursor(v4%));    ' minimum - most negative value of triphasic wave
    CursorActive(v8%, 7, ch%, Cursor(v7%), Cursor(v4%), HCursor(h1%), HCursor(h1%), 0.0001);' rising threshold - BL+2SD crossing at end of triphasic response

       
    '6. ACTIVE. Position vCursor at "extreme" positive value of the triphasic wave. This is the peak response.
    v9%:=CursorNew();                                       ' vCursor9
    CursorActive(v9%, 3, ch%, Cursor(v5%), Cursor(v6%), HCursor(h1%)); ' Extreme - the peak of the response
    CursorLabel(4, v9%, "9-peak");                          ' label vCursor9 "peak"
    CursorLabelPos(v9%, 0);                                 ' position vCursor9 at top of screen
        
        
    '7. STATIC. Fetch vCursor(0) and set to t=1.005s. This ensures the data view does not change during analysis
    CursorVisible(0, 1);                                    ' show cursor 0
    Cursor(0, stim1+0.005);                                 ' USER-DEFINED. Set to 1.005s
    CursorLabelPos(0, 90);                                  ' position vCursor0 near bottom of screen
    CursorLabel(0, 0);
     
endif;

Return 1;                                               ' leaves toolbar active
End;

'====================================================================
'Finally, analyze the evoked response using the XY trendPlot 
'====================================================================

Func TrendPlot1%();

' Latency to onset : time to first rising threshold crossing
latencyOnsetPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(103,ch%,"Cursor(5)",stim1);                    ' calculates time difference btwn stim1 (user-defined stim onset) and vCursor5 (response onset)
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 1, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(latencyOnsetPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Latency to onset1");                     ' y-axis title on graph
ChanTitle$(1, "Latency_onset1");                        ' y-axis title for channel name (import to Excel)
WindowTitle$("Latency to onset1");                      ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size


' Latency to peak : time to and amplitude of peak pos evoked response
latencyPeakPlot1%:=MeasureToXY(2);
MeasureX(103,ch%,"Cursor(9)",stim1);                    ' calculate time to peak evoked response from stim1 (user-defined stim onset)
MeasureY(12,ch%,"Cursor(5)","Cursor(6)");               ' determine "extreme" evoked response amplitude between on-off vCursors5-6 (aka peak)
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/4);
FrontView(latencyPeakPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Peak amp1");                             ' y-axis title on graph
ChanTitle$(1, "Latency_peak1");                         ' y-axis title for channel name (import to Excel)
XTitle$("Latency to peak (s)");                         ' x-axis title on graph
WindowTitle$("Latency to peak1");                       ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size


' Area (under the curve for positive response component of triphasic wave)
areaPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(4,ch%,"Cursor(5)","Cursor(6)");                ' measure area under curve between on-off vCursor5 and vCursor6
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(areaPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Area1");                                 ' y-axis title on graph
ChanTitle$(1, "Area1");                                 ' y-axis title for channel name (import to Excel)
WindowTitle$("Area1");                                  ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size


' RMS (under the curve for positive response component of triphasic wave)
rmsAmpPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(10,ch%,"Cursor(5)","Cursor(6)");               ' measure RMS amplitude of area under the curve between on-off vCursor5 and vCursor6
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(rmsAmpPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "rms_Amp1");                              ' y-axis title on graph
ChanTitle$(1, "rms_Amp1");                              ' y-axis title for channel name (import to Excel)
WindowTitle$("RMS of positive response1");              ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size


' Response duration (for positive component of triphasic wave)
posDurationPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(103,ch%,"Cursor(6)","Cursor(5)",0.0001);       ' measure time difference [vCursor6(off) - vCursor5(on)] for pos response duration
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(posDurationPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "pos_duration1");                         ' y-axis title on graph
ChanTitle$(1, "pos_duration1");                         ' y-axis title for channel name (import to Excel)
WindowTitle$("Duration of positive response1");         ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size


' Peak-to-peak response (for full triphasic wave)
peakToPeakPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(9,ch%,"Cursor(5)","Cursor(8)");                ' measure peak-to-peak diff in max (vCursor5) and min (vCursor8) response of triphasic wave
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(peakToPeakPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "peakToPeak1");                           ' y-axis title on graph
ChanTitle$(1, "peakToPeak1");                           ' y-axis title for channel name (import to Excel)
WindowTitle$("Peak to peak1");                          ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size


' Minimum response : time and amplitude of max negative evoked response
minPlot1%:=MeasureToXY(2);
MeasureX(102,ch%,"Cursor(7)");
MeasureY(8,ch%,"Cursor(6)","Cursor(8)");                ' measure most negative value from off-to-return 
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(minPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Min1");                                  ' y-axis title on graph
ChanTitle$(1, "Min1");                                  ' y-axis title for channel name (import to Excel)
XTitle$("Time (s)");                                    ' x-axis title on graph
WindowTitle$("Minimum1");                               ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size


' Triphasic duration : total response duration from onset to return threshold crossing
triphasicDurPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(103,ch%,"Cursor(8)","Cursor(5)");              ' total duration of triphasic response, on-to-return
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 1, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(triphasicDurPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Triphasic dur1");                        ' y-axis title on graph
ChanTitle$(1, "Triphasic dur1");                        ' y-axis title for channel name (import to Excel)
WindowTitle$("Duration of triphasic response1");        ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size
    
Return 1;                                               ' leaves toolbar active
End;

Func Lat2OnTrendPlot1%();

' Latency to onset : time to first rising threshold crossing
latencyOnsetPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(103,ch%,"Cursor(5)",stim1);                    ' calculates time difference btwn stim1 (user-defined stim onset) and vCursor5 (response onset)
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 1, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(latencyOnsetPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Latency to onset1");                     ' y-axis title on graph
ChanTitle$(1, "Latency_onset1");                        ' y-axis title for channel name (import to Excel)
WindowTitle$("Latency to onset1");                      ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func Lat2PkTrendPlot1%();

' Latency to peak : time to and amplitude of peak pos evoked response
latencyPeakPlot1%:=MeasureToXY(2);
MeasureX(103,ch%,"Cursor(9)",stim1);                    ' calculate time to peak evoked response from stim1 (user-defined stim onset)
MeasureY(12,ch%,"Cursor(5)","Cursor(6)");               ' determine "extreme" evoked response amplitude between on-off vCursors5-6 (aka peak)
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/4);
FrontView(latencyPeakPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Peak amp1");                             ' y-axis title on graph
ChanTitle$(1, "Latency_peak1");                         ' y-axis title for channel name (import to Excel)
XTitle$("Latency to peak (s)");                         ' x-axis title on graph
WindowTitle$("Latency to peak1");                       ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func AreaTrendPlot1%();

' Area (under the curve for positive response component of triphasic wave)
areaPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(4,ch%,"Cursor(5)","Cursor(6)");                ' measure area under curve between on-off vCursor5 and vCursor6
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(areaPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Area1");                                 ' y-axis title on graph
ChanTitle$(1, "Area1");                                 ' y-axis title for channel name (import to Excel)
WindowTitle$("Area1");                                  ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func RMSTrendPlot1%();

' RMS (under the curve for positive response component of triphasic wave)
rmsAmpPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(10,ch%,"Cursor(5)","Cursor(6)");               ' measure RMS amplitude of area under the curve between on-off vCursor5 and vCursor6
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(rmsAmpPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "rms_Amp1");                              ' y-axis title on graph
ChanTitle$(1, "rms_Amp1");                              ' y-axis title for channel name (import to Excel)
WindowTitle$("RMS of positive response1");              ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func PosDurTrendPlot1%();

' Response duration (for positive component of triphasic wave)
posDurationPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(103,ch%,"Cursor(6)","Cursor(5)",0.0001);       ' measure time difference [vCursor6(off) - vCursor5(on)] for pos response duration
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(posDurationPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "pos_duration1");                         ' y-axis title on graph
ChanTitle$(1, "pos_duration1");                         ' y-axis title for channel name (import to Excel)
WindowTitle$("Duration of positive response1");         ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func Pk2PkTrendPlot1%();

' Peak-to-peak response (for full triphasic wave)
peakToPeakPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(9,ch%,"Cursor(5)","Cursor(8)");                ' measure peak-to-peak diff in max (vCursor5) and min (vCursor8) response of triphasic wave
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(peakToPeakPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "peakToPeak1");                           ' y-axis title on graph
ChanTitle$(1, "peakToPeak1");                           ' y-axis title for channel name (import to Excel)
WindowTitle$("Peak to peak1");                          ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func MinTrendPlot1%();

' Minimum response : time and amplitude of max negative evoked response
minPlot1%:=MeasureToXY(2);
MeasureX(102,ch%,"Cursor(7)");
MeasureY(8,ch%,"Cursor(6)","Cursor(8)");                ' measure most negative value from off-to-return 
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(minPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Min1");                                  ' y-axis title on graph
ChanTitle$(1, "Min1");                                  ' y-axis title for channel name (import to Excel)
XTitle$("Time (s)");                                    ' x-axis title on graph
WindowTitle$("Minimum1");                               ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func TriDurTrendPlot1%();

' Triphasic duration : total response duration from onset to return threshold crossing
triphasicDurPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(103,ch%,"Cursor(8)","Cursor(5)");              ' total duration of triphasic response, on-to-return
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 1, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(triphasicDurPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Triphasic dur1");                        ' y-axis title on graph
ChanTitle$(1, "Triphasic dur1");                        ' y-axis title for channel name (import to Excel)
WindowTitle$("Duration of triphasic response1");        ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func Cleanup1%();
Overdraw(2, 0);                                         ' remove frame overdrawing
CursorDelete(-1);                                       ' clear all existing vertical cursors
HCursorDelete (-1);                                     ' clear all existing horizontal cursors

XRange(stim1-0.0175,stim1+0.0225);                      ' user defined x-axis range around ROI
ChanShow(-1, 1);                                        ' show all channels
Optimise(-1);

Return 1;                                               ' leaves toolbar active
End;

'==============================================================================================================
'                   REVISED CODE USING STATIC CURSORS FOR COMPLEX WAVEFORM ANALYSIS
'==============================================================================================================

Func Measure1Rev%(); 
'var ok6%;
'var label9%,labelor%,label10%,label11%;
'var chkBL1%,chkBL2%;

'create dialog to select whether user wants to use BL(+)*2SD or BL(+/-)*2SD
DlgCreate("Threshold crossing calculations",0,0,30,0);
DlgAllow(32);                                           ' user can change view
DlgLabel(1,"Select one option:");
DlgCheck(2,"Use BL+2SD");                               ' original cursor placements/calculations
DlgLabel(3,"              or");
DlgCheck(4,"Use BL(+/-)2SD");                          ' revised cursor placements/calculations
DlgLabel(5,"BL+2SD = rising threshold",0,0);
DlgLabel(6,"BL-2SD  = falling threshold",0,0);

ok6%:= DlgShow(label9%,chkBL1%,labelor%,chkBL2%,label10%,label11%);  ' checkbox to confirm analysis of evoked response-1
if ok6% = 0 then halt; endif;

if chkBL1% <> 0 then                                        ' if using BL+2SD for threshold crossings...

    Window(0, 0, 90, 93);
    ChanShow(-1,0);                                         ' hide all channels and...
    ChanShow(ch%,1);                                        ' only show channel of interest to analyse

    '1. (STATIC) User-defined time frame before stimulus onset to measure baseline activity for threshold crossing
    v1%:=CursorNew(stim1-0.015);                            ' vCursor1
    CursorLabel(4, v1%, "1-baseOn");                        ' label vCursor1 as "1-baseOn"
    CursorLabelPos(v1%, 100);                               ' position vCursor1 at bottom of screen
        
    v2%:=CursorNew(stim1-0.005);                            ' vCursor2
    CursorLabel(4, v2%, "2-baseOff");                       ' label vCursor2 as "2-baseOff"
    CursorLabelPos(v2%, 100);                               ' position vCursor2 at bottom of screen


    '2. (STATIC) User-defined time frame to set region of interest for monosynaptic response measurements
    v3%:=CursorNew(stim1+0.002);                            ' vCursor3
    CursorLabel(4, v3%, "3-START");                         ' label vCursor3 as "3-START"
    CursorLabelPos(v3%, 100);                               ' position vCursor3 at bottom of screen
        
    v4%:=CursorNew(stim1+0.055);                             ' vCursor4
    CursorLabel(4, v4%, "4-END");                           ' label vCursor4 as "4-END"
    CursorLabelPos(v4%, 100);                               ' position vCursor4 at bottom of screen


    '3. (ACTIVE) Position hCursors at baseline threshold activity and at peak response
    h1%:=HCursorNew(ch%);                                   ' create hCursor1 
    HCursorActive(h1%, 7, Cursor(v1%), Cursor(v2%), 2, 0);  ' mean + 2SD baseline level of activity before stim
    HCursorLabel(4, h1%, "1-BL+2SD");                       ' label hCursor1 "1-BL+2SD"

    h2%:=HCursorNew(ch%);                                   ' create hCursor2  
    HCursorActive(h2%, 4, Cursor(v3%), Cursor(v4%), 0, 0);  ' Maximum - peak of evoked response 
    HCursorLabel(4, h2%, "2-peak");                         ' label hCursor2 "2-peak"

    h4%:=HCursorNew(ch%);                                    ' create hCursor4, baseline avg 
    HCursorActive(h4%, 3, "Cursor(1)", "Cursor(2)", 0, 0);   ' mean level
    HCursorLabel(4, h4%, "4-BL");                            ' label hCursor4 "4-BL"   
    
    
    '4. (ACTIVE) Position vCursor at "extreme" positive value of the triphasic wave. This is the peak response.
    v5%:=CursorNew();                                       ' vCursor5
    CursorActive(v5%, 1, ch%, Cursor(v3%), Cursor(v4%), HCursor(h1%), 0, 0, "1"); ' Maximum - the peak of the response
    '                                                                             ' positions cursor at 1.0 if error
    CursorLabel(4, v5%, "5-peak");                          ' label vCursor5 "5-peak"
    CursorLabelPos(v5%, 0);                                 ' position vCursor5 at top of screen


    '5. (ACTIVE) Position vCursor at onset of first evoked response
    v6%:=CursorNew();                                       ' vCursor6
    CursorActive(v6%, 7, ch%, Cursor(v3%), Cursor(v4%), HCursor(h1%), HCursor(h1%), 0.0005, "1");      ' Rising threshold above BL+2SD
    '                                                                                                  ' positions cursor at 1.0 if error
    CursorLabel(4, v6%, "6-on");                            ' label vCursor6 "6-on"
    CursorLabelPos(v6%, 90);                                ' position vCursor6 near middle of screen    


    '6. (ACTIVE) Position vCursor at end of total evoked activity
    v7%:=CursorNew();                                       ' vCursor7
    CursorActive(v7%, 8, ch%, Cursor(v5%), Cursor(v4%), HCursor(h1%), HCursor(h1%), 0.002, "1");      ' Falling threshold below BL+2SD
    '                                                                                                 ' positions cursor at 1.0 if error
    CursorLabel(4, v7%, "7-total");                         ' label vCursor7 as "7-total"
    CursorLabelPos(v7%, 90);                                ' position vCursor7 near middle of screen


    '7. (ACTIVE) Position vCursor at negative threshold crossing of evoked response 
    v8%:=CursorNew();                                       ' vCursor9
    CursorActive(v8%, 8, ch%, Cursor(v5%), Cursor(v7%)+0.01, HCursor(h1%), HCursor(h1%), 0.0001, "1");   'Falling threshold below BL+2SD (was 0.0001)
    '                                                       ' need to offset vCursor7 in the event vCursor7 & vCursor8 are same values    
    CursorLabel(4, v8%, "8-off");                           ' label vCursor8 as "8-off"
    CursorLabelPos(v8%, 90);                                ' position vCursor8 near middle of screen


    '8. (STATIC) Fetch vCursor(0) and set to stim1+0.005s. This ensures the data view does not change during analysis
    CursorVisible(0, 1);                                    ' show cursor 0
    Cursor(0, stim1+0.005);                                 
    CursorLabelPos(0, 90);                                  ' position vCursor0 near bottom of screen
    CursorLabel(0, 0);
    
endif;


if chkBL2% <> 0 then                                        ' if using BL(+/-)2SD for threshold crossings...
    
    Window(0, 0, 90, 93);
    ChanShow(-1,0);                                         ' hide all channels and...
    ChanShow(ch%,1);                                        ' only show channel of interest to analyse

    '1. (STATIC) User-defined time frame before stimulus onset to measure baseline activity for threshold crossing
    v1%:=CursorNew(stim1-0.015);                            ' vCursor1
    CursorLabel(4, v1%, "1-baseOn");                        ' label vCursor1 as "1-baseOn"
    CursorLabelPos(v1%, 100);                               ' position vCursor1 at bottom of screen
        
    v2%:=CursorNew(stim1-0.005);                            ' vCursor2
    CursorLabel(4, v2%, "2-baseOff");                       ' label vCursor2 as "2-baseOff"
    CursorLabelPos(v2%, 100);                               ' position vCursor2 at bottom of screen


    '2. (STATIC) User-defined time frame to set region of interest for monosynaptic response measurements
    v3%:=CursorNew(stim1+0.002);                            ' vCursor3
    CursorLabel(4, v3%, "3-START");                         ' label vCursor3 as "3-START"
    CursorLabelPos(v3%, 100);                               ' position vCursor3 at bottom of screen
        
    v4%:=CursorNew(stim1+0.055);                             ' vCursor4
    CursorLabel(4, v4%, "4-END");                           ' label vCursor4 as "4-END"
    CursorLabelPos(v4%, 100);                               ' position vCursor4 at bottom of screen


    '3. (ACTIVE) Position hCursors at baseline threshold activity and at peak response
    h1%:=HCursorNew(ch%);                                   ' create hCursor1 
    HCursorActive(h1%, 7, Cursor(v1%), Cursor(v2%), 2, 0);  ' mean + 2SD baseline level of activity before stim
    HCursorLabel(4, h1%, "1-BL+2SD");                       ' label hCursor1 "1-BL+2SD"

    h2%:=HCursorNew(ch%);                                   ' create hCursor2  
    HCursorActive(h2%, 4, Cursor(v3%), Cursor(v4%), 0, 0);  ' Maximum - peak of evoked response 
    HCursorLabel(4, h2%, "2-peak");                         ' label hCursor2 "2-peak"

    h3%:=HCursorNew(ch%);                                   ' create hCursor3, falling threshold below BL*(-)2SD 
    HCursorActive(h3%, 7, Cursor(v1%), Cursor(v2%), -2, 0); ' mean - 2SD baseline level of activity before stim
    HCursorLabel(4, h3%, "3-BL-2SD");                       ' label hCursor3 "3-BL-2SD"

    h4%:=HCursorNew(ch%);                                   ' create hCursor4, baseline avg 
    HCursorActive(h4%, 3, "Cursor(1)", "Cursor(2)", 0, 0);  ' mean level
    HCursorLabel(4, h4%, "4-BL");                           ' label hCursor4 "4-BL"   
    
        
    '4. (ACTIVE) Position vCursor at "extreme" positive value of the triphasic wave. This is the peak response.
    v5%:=CursorNew();                                       ' vCursor5
    CursorActive(v5%, 1, ch%, Cursor(v3%), Cursor(v4%), HCursor(h1%), 0, 0, "1"); ' Maximum - the peak of the response above BL+2SD
    '                                                                             ' positions cursor at 1.0 if error
    CursorLabel(4, v5%, "5-peak");                          ' label vCursor5 "5-peak"
    CursorLabelPos(v5%, 0);                                 ' position vCursor5 at top of screen


    '5. (ACTIVE) Position vCursor at onset of first evoked response
    v6%:=CursorNew();                                       ' vCursor6
    CursorActive(v6%, 7, ch%, Cursor(v3%), Cursor(v4%), HCursor(h1%), HCursor(h1%), 0.0005, "1");      ' Rising threshold above BL+2SD
    '                                                                                                  ' positions cursor at 1.0 if error
    CursorLabel(4, v6%, "6-on");                            ' label vCursor6 "6-on"
    CursorLabelPos(v6%, 90);                                ' position vCursor6 near middle of screen    


    '6. (ACTIVE) Position vCursor at end of total evoked activity
    v7%:=CursorNew();                                       ' vCursor7
    CursorActive(v7%, 8, ch%, Cursor(v5%), Cursor(v4%), HCursor(h3%), HCursor(h3%), 0.002, "1");      ' Falling threshold below BL-2SD
    '                                                                                                 ' positions cursor at 1.0 if error
    CursorLabel(4, v7%, "7-total");                         ' label vCursor7 as "7-total"
    CursorLabelPos(v7%, 90);                                ' position vCursor7 near middle of screen


    '7. (ACTIVE) Position vCursor at negative threshold crossing of evoked response 
    v8%:=CursorNew();                                       ' vCursor9
    CursorActive(v8%, 8, ch%, Cursor(v5%), Cursor(v7%)+0.01, HCursor(h3%), HCursor(h3%), 0.0001, "1");   ' Falling threshold below BL-2SD (was 0.0001)
    '                                                       ' need to offset vCursor7 in the event vCursor7 & vCursor8 are same values       
    CursorLabel(4, v8%, "8-off");                           ' label vCursor8 as "8-off"
    CursorLabelPos(v8%, 90);                                ' position vCursor8 near middle of screen


    '8. (STATIC) Fetch vCursor(0) and set to stim1+0.005s. This ensures the data view does not change during analysis
    CursorVisible(0, 1);                                    ' show cursor 0
    Cursor(0, stim1+0.005);                                 
    CursorLabelPos(0, 90);                                  ' position vCursor0 near bottom of screen
    CursorLabel(0, 0);
    
endif;


Return 1;                                               ' leaves toolbar active
End;

Func Lat2On1RevTrendPlot1%();                            

' Latency to onset : time to first rising threshold crossing
latencyOnsetPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(103,ch%,"Cursor(6)",stim1);                    ' calculates time difference btwn stim1 (user-defined stim onset) and vCursor6 (response onset)
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 1, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(latencyOnsetPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Latency to onset");                      ' y-axis title on graph; was "Latency to onset1-Rev"
ChanTitle$(1, "Sec");                                   ' y-axis title for channel name (import to Excel); was "Latency_onset1-Rev"
WindowTitle$("Latency to onset-Rev");                   ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func Lat2Pk1RevTrendPlot1%();                           ' compare measureY "extreme" vs "max"

' Latency to peak : time to and amplitude of peak pos evoked response
latencyPeakPlot1%:=MeasureToXY(2);
MeasureX(103,ch%,"Cursor(5)",stim1);                    ' calculate time to peak evoked response from TStim onset (user-defined)
MeasureY(12,ch%,"Cursor(3)","Cursor(4)");               ' determine "extreme" evoked response amplitude between "START"-"END" vCursors3-4 (aka peak)
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/4);
FrontView(latencyPeakPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Amplitude");                             ' y-axis title on graph; was "Peak amp1-Rev"
ChanTitle$(1, "V");                                     ' y-axis title for channel name (import to Excel); was "Latency_peak1-Rev"
XTitle$("Sec");                                         ' x-axis title on graph; was "Latency to peak (s)"
WindowTitle$("Latency to peak-Rev");                    ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func PosDurRevTrendPlot1%();   

' Response duration (for positive component of triphasic wave)
posDurationPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(103,ch%,"Cursor(8)","Cursor(6)",0.0001);       ' measure time difference [vCursor8(off) - vCursor6(on)] for pos response duration
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(posDurationPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Duration of positive response");         ' y-axis title on graph
ChanTitle$(1, "Sec");                                   ' y-axis title for channel name (import to Excel); was pos_duration1-Rev
WindowTitle$("Duration of positive response-Rev");      ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

Func AreaRevTrendPlot1%(); 

' Area (under the curve for positive response component of triphasic wave)
areaPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(4,ch%,"Cursor(6)","Cursor(8)");                ' measure area under curve between on-off vCursor6 and vCursor8
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(areaPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Area");                                  ' y-axis title on graph
ChanTitle$(1, "V*Sec");                                 ' y-axis title for channel name (import to Excel); was "Area1-Rev"
WindowTitle$("Area-Rev");                               ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;
End;

Func DurTotRevTrendPlot1%();

' Total response duration 
posDurationPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(103,ch%,"Cursor(7)","Cursor(6)",0.0001);       ' measure time difference [vCursor7(total) - vCursor6(on)] for total response duration
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(posDurationPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Total duration");                        ' y-axis title on graph
ChanTitle$(1, "Sec");                                   ' y-axis title for channel name (import to Excel); was "tot_duration1-Rev"
WindowTitle$("Duration of total response-Rev");         ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;
End;

Func AreaTotRevTrendPlot1%();

' Area of total evoked response
areaPlot1%:=MeasureToXY(2);
MeasureX(104);
MeasureY(4,ch%,"Cursor(6)","Cursor(7)");                ' measure area under curve between on-total vCursor6 and vCursor7
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/2);
FrontView(areaPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Area (total)");                          ' y-axis title on graph
ChanTitle$(1, "V*Sec");                                 ' y-axis title for channel name (import to Excel); was "Area1-Rev"
WindowTitle$("Area (total)-Rev");                       ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;
End;

Func Measure1RevPeaks%(); 'use BL*(+)2SD for all threshold crossings
'NB: this function does not require user-defined threshold crossing as offset/total activity is NOT calculated

'1. (STATIC) User-defined time frame before stimulus onset to measure baseline activity for threshold crossing
v1%:=CursorNew(stim1-0.015);                            ' vCursor1
CursorLabel(4, v1%, "1-baseOn");                        ' label vCursor1 as "1-baseOn"
CursorLabelPos(v1%, 100);                               ' position vCursor1 at bottom of screen
    
v2%:=CursorNew(stim1-0.005);                            ' vCursor2
CursorLabel(4, v2%, "2-baseOff");                       ' label vCursor2 as "2-baseOff"
CursorLabelPos(v2%, 100);                               ' position vCursor2 at bottom of screen


'2. (STATIC) User-defined time frame to set region of interest for monosynaptic response measurements
v3%:=CursorNew(stim1+0.002);                            ' vCursor3
CursorLabel(4, v3%, "3-START");                         ' label vCursor3 as "3-START"
CursorLabelPos(v3%, 100);                               ' position vCursor3 at bottom of screen
    
v4%:=CursorNew(stim1+0.04);                             ' vCursor4
CursorLabel(4, v4%, "4-END");                           ' label vCursor4 as "4-END"
CursorLabelPos(v4%, 100);                               ' position vCursor4 at bottom of screen


'3. (ACTIVE) Position hCursors at baseline threshold activity and at peak response
h1%:=HCursorNew(ch%);                                   ' create hCursor1 
HCursorActive(h1%, 7, Cursor(v1%), Cursor(v2%), 2, 0);  ' mean + 2SD baseline level of activity before stim
HCursorLabel(4, h1%, "1-BL*(+)2SD");                    ' label hCursor1 "1-BL*(+)2SD"

h2%:=HCursorNew(ch%);                                   ' create hCursor2  
HCursorActive(h2%, 4, Cursor(v3%), Cursor(v4%), 0, 0);  ' Maximum - peak of evoked response 
HCursorLabel(4, h2%, "2-true peak");                    ' label hCursor2 "2-true peak"


'4. (ACTIVE) Position vCursor at "max" positive value of the triphasic wave. This is the true peak response.
v5%:=CursorNew();                                       ' vCursor5
CursorActive(v5%, 1, ch%, Cursor(v3%), Cursor(v4%), HCursor(h1%), 0, 0, "1"); ' Maximum - the peak of the response
'                                                                             ' positions cursor at 1.0 if error
CursorLabel(4, v5%, "5-true peak");                                           ' label vCursor5 "5-true peak"
CursorLabelPos(v5%, 0);                                                       ' position vCursor5 at top of screen


'5. (ACTIVE) Position vCursor at onset of first evoked response
v6%:=CursorNew();                                       ' vCursor6
CursorActive(v6%, 7, ch%, Cursor(v3%), Cursor(v4%), HCursor(h1%), HCursor(h1%), 0.0005, "1");      ' Rising threshold (was 0.001 > 0.002, but didn't work for WT)
'                                                                                                  ' positions cursor at 1.0 if error
CursorLabel(4, v6%, "6-on");                            ' label vCursor6 "6-on"
CursorLabelPos(v6%, 90);                                ' position vCursor6 near middle of screen


'6. (ACTIVE) Position vCursor at first peak
v7%:=CursorNew();                                       ' vCursor7
CursorActive(v7%, 4, ch%, Cursor(v6%), Cursor(v5%)+0.01, HCursor(h1%), 3e-006, 0.01, "1");   'Peak find, min amp of 3e-006V, max dur 0.01s
'                                                       ' offset vCursor5 in the event true peak is first peak
CursorLabel(4, v7%, "7-first peak");                    ' label vCursor "7-first peak"
CursorLabelPos(v7%, 25);                                ' position vCursor7 at top of screen


'7. (STATIC) Fetch vCursor(0) and set to stim1+0.005s. This ensures the data view does not change during analysis
CursorVisible(0, 1);                                    ' show cursor 0
Cursor(0, stim1+0.005);                                 
CursorLabelPos(0, 90);                                  ' position vCursor0 near bottom of screen
CursorLabel(0, 0);


Return 1;
End;

Func Lat2Pk1RevPeaksTrendPlot1%();                      

' Latency to first peak : time to and amplitude of first peak in evoked response
latencyFirstPeakPlot1%:=MeasureToXY(2);
MeasureX(103,ch%,"Cursor(7)",stim1);
MeasureY(100,ch%,"Cursor(7)","1",0);
MeasureChan(1,"Channel 1",0);
WindowVisible(1);
ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);               ' process all frames
FrontView(data%);
XRange(Cursor(0)-(XHigh()-XLow())/4);
FrontView(latencyFirstPeakPlot1%);
Window(65, 0, 100, 97);                                 ' resize the XY data plot window
Optimise(-2);                                           ' optimise y-axis of XY data plot
XYJoin(1, 0);                                           ' set XY join mode to none (scatter plot)
ChanTitle$(0, "Amplitude");                             ' y-axis title on graph; was "Peak amp1-Rev"
ChanTitle$(1, "V");                                     ' y-axis title for channel name (import to Excel)
XTitle$("Sec");                                         ' x-axis title on graph
WindowTitle$("Latency to first peak-Rev");              ' XY plot window name

FrontView(data%);                                       ' bring data file back to the front for next analysis
Window(0, 0, 57, 96);                                   ' adjust data window size

Cleanup1%();

Return 1;                                               ' leaves toolbar active
End;

'==============================================================================================================
'                                            FORMATTING MSR FOR EXPORT
'==============================================================================================================

Func Format1%();
'var ok5%;
'var ymax1,ymin1,xmin1,xmax1;

Window(0, 0, 50, 97);
ChanShow(-1,0);                                         ' hide all channels and...
ChanShow(ch%,1);                                        ' only show channel of interest to analyse

DlgCreate("Axis scaling");
DlgAllow(32);                                           ' user can change view
DlgReal(1,"Top",0,30);
DlgReal(2,"Bottom (neg)",0,30);
DlgReal(3,"X-min",0,30);
DlgReal(4,"X-max",0,30);

ok5%:= DlgShow(ymax1,ymin1,xmin1,xmax1);

if ok5% = 0 then halt; endif;

XRange(xmin1,xmax1);
YRange(ch%,-ymin1,ymax1);

Overdraw(1, 3);                                         ' Set up frame overdrawing
'OverDrawFrames(-1, 0,0,0);                             ' overdraw all frames
OverDrawFrames(-6, 0,-1,0);                             ' overdraw only untagged frames
ChanColourSet(ch%, 1, 0.87451,0.87451,0.87451);         ' Set channel colour to gray

AvgWave1%();

Return 1;                                               ' leaves toolbar active
End;

Func AvgWave1%();
'var avgWvfrm1%;

FrontView(data%);                                       ' bring data file back to the front for next analysis
XRange(xmin1,xmax1);
YRange(ch%,-ymin1,ymax1);

avgWvfrm1%:=SetAverage(ch%,0.055,stim1-0.005,0,0,0);
WindowVisible(1);
'ProcessFrames(-1, -1, -1, 0, 1, 1, 0, 1);              ' process all frames
ProcessFrames(-6, -1, -1, 0, 1, 1, 0, 1);               ' process only untagged frames
FrontView(data%);
XRange(xmin1,xmax1);

FrontView(avgWvfrm1%);
Window(50, 0, 100, 97);
YRange(1,-ymin1,ymax1);

Return 1;                                               ' leaves toolbar active
End;

Func Cleanup2%();
Overdraw(2, 0);                                         ' remove frame overdrawing
CursorDelete(-1);                                       ' clear all existing vertical cursors
HCursorDelete (-1);                                     ' clear all existing horizontal cursors

XRange(stim1-0.0175,stim1+0.0225);                      ' user defined x-axis range around ROI
ChanShow(-1, 1);                                        ' show all channels
Optimise(-1);

ChanColourSet(ch%, 1, 1,0,0);                           ' set channel of interest colour to red

Return 1;                                               ' leaves toolbar active
End;